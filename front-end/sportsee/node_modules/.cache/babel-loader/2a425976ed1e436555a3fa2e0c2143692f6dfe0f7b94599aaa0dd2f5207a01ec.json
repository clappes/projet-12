{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Lucas\\\\Documents\\\\projet-12vf\\\\front-end\\\\sportsee\\\\src\\\\components\\\\RadarsChart\\\\RadarsChart.jsx\",\n  _s = $RefreshSig$();\nimport { Radar, RadarChart, PolarGrid, PolarAngleAxis, ResponsiveContainer } from 'recharts';\nimport { useParams } from \"react-router-dom\";\nimport { useEffect, useState } from 'react';\nimport { getPerformance } from '../../api';\nimport \"./RadarsChart.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction mapData(perfs) {\n  return perfs === null || perfs === void 0 ? void 0 : perfs.data.map(perf => {\n    switch (perf.kind) {\n      case 1:\n        perf.kind = \"Cardio\";\n        break;\n      case 2:\n        perf.kind = \"Energie\";\n        break;\n      case 3:\n        perf.kind = \"Endurance\";\n        break;\n      case 4:\n        perf.kind = \"Force\";\n        break;\n      case 5:\n        perf.kind = \"Vitesse\";\n        break;\n      case 6:\n        perf.kind = \"Intensité\";\n        break;\n      default:\n        break;\n    }\n    return perf;\n  });\n}\nfunction RadarsChart() {\n  _s();\n  const {\n    id\n  } = useParams();\n  const [data, setData] = useState(null);\n  const fetchPerformance = async id => {\n    const response = await getPerformance(id);\n    setData(response);\n  };\n  useEffect(() => {\n    if (id) {\n      fetchPerformance(id);\n    }\n  }, [id]);\n  if (!data || data === \"can not get user\") {\n    return null;\n  } else {\n    return /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n      width: \"100%\",\n      height: 263,\n      children: /*#__PURE__*/_jsxDEV(RadarChart, {\n        cx: \"50%\",\n        cy: \"50%\",\n        outerRadius: \"70%\",\n        data: mapData(data),\n        children: [/*#__PURE__*/_jsxDEV(PolarGrid, {\n          radialLines: false\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(PolarAngleAxis, {\n          dataKey: \"kind\",\n          tick: {\n            fill: \"white\",\n            fontSize: 12\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Radar, {\n          name: data === null || data === void 0 ? void 0 : data.id,\n          dataKey: \"value\",\n          stroke: \"#E60000\",\n          fill: \"#E60000\",\n          fillOpacity: 0.8\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 9\n    }, this);\n  }\n}\n_s(RadarsChart, \"bKWtrFi4rDiB0nUS9DgR6D7F0mg=\", false, function () {\n  return [useParams];\n});\n_c = RadarsChart;\nexport default RadarsChart;\nvar _c;\n$RefreshReg$(_c, \"RadarsChart\");","map":{"version":3,"names":["Radar","RadarChart","PolarGrid","PolarAngleAxis","ResponsiveContainer","useParams","useEffect","useState","getPerformance","jsxDEV","_jsxDEV","mapData","perfs","data","map","perf","kind","RadarsChart","_s","id","setData","fetchPerformance","response","width","height","children","cx","cy","outerRadius","radialLines","fileName","_jsxFileName","lineNumber","columnNumber","dataKey","tick","fill","fontSize","name","stroke","fillOpacity","_c","$RefreshReg$"],"sources":["C:/Users/Lucas/Documents/projet-12vf/front-end/sportsee/src/components/RadarsChart/RadarsChart.jsx"],"sourcesContent":["import { Radar, RadarChart, PolarGrid, PolarAngleAxis, ResponsiveContainer } from 'recharts';\r\nimport { useParams } from \"react-router-dom\";\r\nimport { useEffect, useState } from 'react'\r\nimport { getPerformance } from '../../api'\r\n\r\nimport \"./RadarsChart.css\";\r\n\r\nfunction mapData(perfs) {\r\n  return perfs?.data.map((perf) => {\r\n    switch (perf.kind) {\r\n      case 1:\r\n        perf.kind = \"Cardio\";\r\n        break;\r\n      case 2:\r\n        perf.kind = \"Energie\";\r\n        break;\r\n      case 3:\r\n        perf.kind = \"Endurance\";\r\n        break;\r\n      case 4:\r\n        perf.kind = \"Force\";\r\n        break;\r\n      case 5:\r\n        perf.kind = \"Vitesse\";\r\n        break;\r\n      case 6:\r\n        perf.kind = \"Intensité\";\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n    return perf\r\n  } )\r\n}\r\n\r\nfunction RadarsChart() {\r\n\r\n    const { id } = useParams();\r\n    const [data, setData] = useState(null);\r\n    \r\n    const fetchPerformance = async (id) => {\r\n      const response = await getPerformance(id); \r\n      setData(response)\r\n    }\r\n      \r\n    useEffect(() => {\r\n      if (id) {\r\n        fetchPerformance(id)\r\n      }\r\n    }, [id]);\r\n      \r\n    if (!data || data === \"can not get user\") {\r\n      return (null);\r\n    } else {\r\n\r\n    return (\r\n        <ResponsiveContainer width=\"100%\" height={263}>\r\n          <RadarChart cx=\"50%\" cy=\"50%\" outerRadius=\"70%\" data={mapData(data)}>\r\n          <PolarGrid radialLines={false}/>\r\n            <PolarAngleAxis dataKey=\"kind\" tick={{ fill: \"white\", fontSize: 12 }}/>\r\n            <Radar name={data?.id} dataKey=\"value\" stroke=\"#E60000\" fill=\"#E60000\" fillOpacity={0.8} />\r\n          </RadarChart>\r\n        </ResponsiveContainer>\r\n      );\r\n    }\r\n  }\r\n\r\nexport default RadarsChart;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}